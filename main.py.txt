# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
velx = 130 / 60
vely = 130 / 60
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [velx, vely]
paddle1_pos = [HALF_PAD_WIDTH, HEIGHT / 2]
paddle2_pos = [WIDTH - HALF_PAD_WIDTH, HEIGHT / 2]
paddle1_vel = 0
paddle2_vel = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel, velx, vely # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    velx = random.randrange(120, 240)
    vely = random.randrange(60, 180)
    if direction == RIGHT: 
        ball_vel = [velx / 60, -vely / 60] # direction left and up
    else:
        ball_vel = [-velx / 60, -vely / 60] # direction right and up
    
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0 
    score2 = 0 
    paddle1_vel = 0
    paddle2_vel = 0
    paddle1_pos = [HALF_PAD_WIDTH, HEIGHT / 2] # mid position for paddles
    paddle2_pos = [WIDTH - HALF_PAD_WIDTH, HEIGHT / 2]
    direction = random.choice([RIGHT, LEFT])
    spawn_ball(direction)

def check_collision_top_bottom():
    global ball_vel
    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= (HEIGHT - BALL_RADIUS):
        ball_vel[1] *= -1

def check_collision_right_left():
    global score1, score2, ball_vel
    # paddle1 collision
    if ball_pos[0] < BALL_RADIUS + PAD_WIDTH: # collision code for vertical wall
        if ball_pos[1] > paddle1_pos[1] - PAD_HEIGHT and ball_pos[1] < paddle1_pos[1] + PAD_HEIGHT:
            ball_vel[0] *= -1.1 # 10 percent added velocity on each reflection
        else:    
            spawn_ball(RIGHT)
            score2 += 1
    # paddle2 collision     
    if ball_pos[0] > WIDTH - (BALL_RADIUS + PAD_WIDTH): # check if paddle 2 is near the ball
        if ball_pos[1] > paddle2_pos[1] - PAD_HEIGHT and ball_pos[1] < paddle2_pos[1] + PAD_HEIGHT:
            ball_vel[0] *= -1.1
        else:    
            spawn_ball(LEFT)
            score1 += 1
            
def update_paddle_position():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel
    if paddle1_pos[1] >= HALF_PAD_HEIGHT and paddle1_pos[1] <= HEIGHT - HALF_PAD_HEIGHT:
        paddle1_pos[1] += paddle1_vel
    else:
        if paddle1_pos[1] < HALF_PAD_HEIGHT: 
            paddle1_pos[1] = HALF_PAD_HEIGHT 
        else:
            paddle1_pos[1] = HEIGHT - HALF_PAD_HEIGHT
        paddle1_vel = 0
    # keep paddle2 inside the field    
    if paddle2_pos[1] >= HALF_PAD_HEIGHT and paddle2_pos[1] <= HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos[1] += paddle2_vel
    else:
        if paddle2_pos[1] < HALF_PAD_HEIGHT: 
            paddle2_pos[1] = HALF_PAD_HEIGHT 
        else:
            paddle2_pos[1] = HEIGHT - HALF_PAD_HEIGHT
        paddle2_vel = 0
            
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel 
    
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball according to constant velocity applied to ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, 'blue', 'blue')
    
    # collision code for horizontal walls
    check_collision_top_bottom()
    
    #collision check for vertical walls and paddles
    check_collision_right_left()
            
    # update paddle's vertical position, keep paddle on the screen
    update_paddle_position()
    
    # left paddle drawn
    canvas.draw_polygon([[0, paddle1_pos[1] - HALF_PAD_HEIGHT], [0, paddle1_pos[1] + HALF_PAD_HEIGHT], \
                         [PAD_WIDTH, paddle1_pos[1] + HALF_PAD_HEIGHT], \
                         [PAD_WIDTH, paddle1_pos[1] - HALF_PAD_HEIGHT]], 1, 'WHITE', 'WHITE')
    # right paddle drawn
    canvas.draw_polygon([[WIDTH - PAD_WIDTH, paddle2_pos[1] - HALF_PAD_HEIGHT], \
                         [WIDTH - PAD_WIDTH, paddle2_pos[1] + HALF_PAD_HEIGHT], \
                         [WIDTH, paddle2_pos[1] + HALF_PAD_HEIGHT], \
                         [WIDTH, paddle2_pos[1] - HALF_PAD_HEIGHT]], 1, 'WHITE', 'WHITE')
    # determine whether paddle and ball collide
 
    # draw scores
    canvas.draw_text(str(score1), [WIDTH / 2 - 70, 50], 40, 'PINK')
    canvas.draw_text(str(score2), [WIDTH / 2 + 50, 50], 40, 'PINK')
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key  == simplegui.KEY_MAP['w']: paddle1_vel -= 3
    if key  == simplegui.KEY_MAP['s']: paddle1_vel += 3
    if key  == simplegui.KEY_MAP['up']: paddle2_vel -= 3
    if key  == simplegui.KEY_MAP['down']: paddle2_vel += 3
    
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key  == simplegui.KEY_MAP['w']: paddle1_vel = 0
    if key  == simplegui.KEY_MAP['s']: paddle1_vel = 0
    if key  == simplegui.KEY_MAP['up']: paddle2_vel = 0
    if key  == simplegui.KEY_MAP['down']: paddle2_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", new_game, 90)

# start frame
new_game()
frame.start()
